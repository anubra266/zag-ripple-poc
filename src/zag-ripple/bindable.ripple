import type { Bindable, BindableParams } from "@zag-js/core"
import { isFunction } from "@zag-js/utils"
import { track, effect } from "ripple"

export function createBindable(props) {
  const initial = props().value ?? props().defaultValue
  const eq = props().isEqual ?? Object.is

  let value = track(initial)
  let controlled = track(() => props().value !== undefined)

  let valueRef = { current: @value }
  let prevValue = { current: undefined }

  // Update refs when value changes
  effect(() => {
    const v = @controlled ? props().value : @value
    valueRef = { current: v }
    prevValue = { current: v }
  })

  const set = (v) => {
    const prev = prevValue.current
    const next = isFunction(v) ? v(valueRef.current) : v

    if (props().debug) {
      console.log(`[bindable > ${props().debug}] setValue`, { next, prev })
    }


    if (!@controlled) @value = next
    if (!eq(next, prev)) {
      props().onChange?.(next, prev)
    }
  }

  function get() {
    return (@controlled ? props().value : @value)
  }

  return {
    initial,
    ref: valueRef,
    get,
    set,
    invoke(nextValue, prevValue) {
      props().onChange?.(nextValue, prevValue)
    },
    hash(value) {
      return props().hash?.(value) ?? String(value)
    },
  }
}

createBindable.cleanup = (fn: VoidFunction) => {
  effect(() => {
    return fn
  })
}

createBindable.ref = (defaultValue) => {
  let value = track(defaultValue)
  return {
    get: () => @value,
    set: (next) => {
      @value = next
    },
  }
}