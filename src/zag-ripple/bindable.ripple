import { identity, isFunction } from "@zag-js/utils"
import { track, effect, flushSync, untrack } from "ripple"

export function createBindable(props) {
  const initial = props().defaultValue ?? props().value
  const eq = props().isEqual ?? Object.is

  let value = track(initial)
  let controlled = track(() => props().value !== undefined)

  let valueRef = { current: untrack(() => @value) }
  let prevValue = { current: undefined }

  effect(() => {
    const v = @controlled ? props().value : @value
    valueRef = { current: v }
    prevValue = { current: v }
  })

  const setValueFn = (v) => {
    const next = isFunction(v) ? v(valueRef.current) : v
    const prev = prevValue.current
    if (props().debug) {
      console.log(`[bindable > ${props().debug}] setValue`, { next, prev })
    }

    if (!@controlled) {
      @value = next;
    }
    if (!eq(next, prev)) {
      props().onChange?.(next, prev)
    }
  }

  function get(): T {
    return @controlled ? props().value : @value
  }

  return {
    initial,
    ref: valueRef,
    get,
    set(val) {
      const exec = props().sync ? flushSync : identity
      exec(() => setValueFn(val))
    },
    invoke: (nextValue, prevValue) => {
      props().onChange?.(nextValue, prevValue)
    },
    hash: (value) => {
      return props().hash?.(value) ?? String(value)
    },
  }
}

createBindable.cleanup = (_fn: VoidFunction) => {
  effect(() => fn, [])
}

createBindable.ref = (defaultValue: any) => {
  let value = defaultValue
  return {
    get: () => value,
    set: (next) => {
      value = next
    },
  }
}
