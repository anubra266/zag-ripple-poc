import { isFunction } from "@zag-js/utils"
import { track, effect } from "ripple"

export function createBindable(propsGetter) {
  // Create tracked state using RippleJS track - no need for manual block passing
  let value = track(propsGetter().defaultValue)
  let controlled = track(() => propsGetter().value !== undefined)

  // RippleJS effect to sync controlled state changes
  effect(() => {
    if (@controlled && propsGetter().value !== @value) {
      @value = propsGetter().value
    }
  })

  const setValue = (v) => {
    const next = isFunction(v) ? v(@value) : v
    const prev = @value

    if (propsGetter().debug) {
      console.log(`[bindable > ${propsGetter().debug}] setValue`, { next, prev })
    }

    if (!@controlled) {
      @value = next
    }

    const eq = propsGetter().isEqual || Object.is
    if (!eq(next, prev)) {
      const onChange = propsGetter().onChange
      if (onChange) onChange(next, prev)
    }
  }

  return {
    initial: propsGetter().defaultValue,
    ref: { get current() { return @value } },
    get: () => @value,
    set: setValue,
    invoke: (nextValue, prevValue) => {
      const onChange = propsGetter().onChange
      if (onChange) onChange(nextValue, prevValue)
    },
    hash: (val) => {
      const hashFn = propsGetter().hash
      return hashFn ? hashFn(val) : String(val)
    },
  }
}